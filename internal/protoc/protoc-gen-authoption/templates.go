// Code generated by go-bindata.
// sources:
// templates/auth_method_mapping.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAuth_method_mappingGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x6e\xdb\x30\x0c\x86\xcf\xd3\x53\x10\x86\x0f\x4d\x90\x4a\xd8\x35\x40\x0f\x43\xba\x0e\x3d\xb4\x09\xb0\x6c\xd7\x40\xb5\x19\x45\x88\x2d\x09\x92\x1c\xa0\x15\xf4\xee\x03\x6d\x67\x71\xd6\x0e\xa8\x4f\x32\x45\xfe\x3f\x3f\x8a\x42\xc0\xca\xd6\x08\x0a\x0d\x7a\x19\xb1\x86\x97\x57\x70\xde\x46\x5b\xdd\x2a\x34\xb7\xb2\x8b\x87\x16\xe3\xc1\xd6\x1c\xee\xd7\xf0\xbc\xde\xc2\xf7\xfb\xc7\x2d\x67\xcc\xc9\xea\x28\x15\x42\x4a\xfc\x41\x37\xc8\x7f\xd8\xcd\x51\xf1\x67\xd9\x62\xce\x8c\x31\xdd\x3a\xeb\x23\xdc\x30\x00\x80\x42\x59\xab\x1a\xe4\xca\x36\xd2\x28\x6e\xbd\x12\xca\xbb\xaa\xe8\x2f\xd9\x97\x2e\xea\x26\xec\xc8\x0a\x0a\xa5\xe3\xa1\x7b\xe1\x95\x6d\x45\x25\x6d\x10\x6f\x3a\xca\x1a\x1b\xa1\x4d\x44\x6f\x64\x23\xa4\xd3\x82\x52\x8b\x73\x1d\x29\x7d\xb2\x6e\x30\x9d\x31\x96\x12\x78\x69\x14\x42\x19\x60\x79\x07\x03\xc1\x4f\xf4\x27\x5d\x61\x00\x02\x10\xf3\x39\x83\x39\xa4\x54\x86\x33\x14\xcc\x05\x63\x27\xe9\xa7\xc1\xdd\xb7\x2e\x1e\x9e\xfa\x01\x05\xb8\x83\x0b\x09\x1f\x82\x4f\xd2\x39\x6d\x14\xa4\x1e\xf5\x62\xdb\x92\x6d\x19\xc6\x2c\x12\x1f\xbf\x94\xa0\x6c\x49\x74\xed\x22\xe5\x58\x17\xb5\x35\x50\xb6\x7c\xdd\x9f\x02\x14\xc4\xc7\x47\x3e\xde\x3b\xf2\xd3\x57\x4e\xa6\xbb\x21\xbb\x80\x6b\x41\xbd\x07\x69\xea\x89\xee\xdf\x13\xdf\xa0\x6f\x75\x08\x64\x31\xa9\xe9\xdf\x4c\xa4\x54\x0e\x83\xd9\x0c\x4f\x9d\x33\x9f\x90\x8b\x94\xc6\x53\xb1\x9c\x72\x0f\x6d\xa6\x2b\x2d\xfa\x2e\x4e\x4b\x28\x52\xfa\xa8\x85\x9c\x8b\xc5\xbb\xba\xd5\x01\xab\xe3\x46\x7a\xd9\xfe\x53\xd7\x5f\x3c\x68\x6c\xea\xb1\x8d\xeb\xda\xbc\x98\x8c\x00\xcd\x79\xc6\x29\xc1\xf0\x93\x19\xdb\x77\xa6\x7a\xf7\x98\xd6\xeb\x37\x49\x08\xbb\x47\x5a\x9d\x0a\x5d\xb4\xfe\xe6\x84\x5e\xef\x35\xfa\x29\xe9\xd6\x1e\xd1\xfc\x1e\x2f\x16\x40\xb1\x95\x35\x7b\x98\x4f\x72\x28\xa0\xd5\x0c\x68\xf3\xf8\x2f\x23\xfd\x2b\x6d\x19\xfa\x89\xf6\xb8\x1b\x1e\x63\xe7\x0d\x5c\x76\x9a\x5f\x75\xf3\x51\x33\x17\xcf\xc5\xff\x76\x72\x46\x9c\x03\x33\xe4\xfc\x27\x00\x00\xff\xff\xb4\x5d\x04\x73\xee\x03\x00\x00")

func templatesAuth_method_mappingGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAuth_method_mappingGoTmpl,
		"templates/auth_method_mapping.go.tmpl",
	)
}

func templatesAuth_method_mappingGoTmpl() (*asset, error) {
	bytes, err := templatesAuth_method_mappingGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/auth_method_mapping.go.tmpl", size: 1006, mode: os.FileMode(420), modTime: time.Unix(1584978801, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/auth_method_mapping.go.tmpl": templatesAuth_method_mappingGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"auth_method_mapping.go.tmpl": &bintree{templatesAuth_method_mappingGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
